name: Run Tests ðŸ§ª

on:
  push:
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  pull-requests: read

jobs:
  test:
    name: Run Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Cached Assets
        id: cache-assets
        uses: actions/cache@v4.2.0
        with:
          path: ~/.cache/babeldoc
          key: babeldoc-assets-${{ hashFiles('babeldoc/assets/embedding_assets_metadata.py') }}
      - name: Setup uv with Python ${{ matrix.python-version }}
        uses: astral-sh/setup-uv@4959332f0f014c5280e7eac8b70c90cb574c9f9b # v6.6.0
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          activate-environment: true
      - name: Warm up cache
        run: |
          uv run babeldoc --warmup
      - name: Run tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAIAPIKEY }}
          OPENAI_BASE_URL: ${{ secrets.OPENAIAPIURL }}
          OPENAI_MODEL: ${{ secrets.OPENAIMODEL }}
        run: |
          uv run babeldoc --help
          uv run babeldoc --openai --files examples/ci/test.pdf --openai-api-key ${{ env.OPENAI_API_KEY }} --openai-base-url ${{ env.OPENAI_BASE_URL }} --openai-model ${{ env.OPENAI_MODEL }}
      - name: Generate offline assets package
        run: |
          uv run babeldoc --generate-offline-assets /tmp/offline_assets
      - name: Restore offline assets package
        run: |
          rm -rf ~/.cache/babeldoc
          uv run babeldoc --restore-offline-assets /tmp/offline_assets
      - name: Clean up
        run: |
          rm -rf /tmp/offline_assets
          rm -rf ~/.cache/babeldoc/cache.v1.db
          rm -rf ~/.cache/babeldoc/working
